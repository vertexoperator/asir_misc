/*
partial implementation of algorithms described in

"Using Extended Derksen Ideals in Computational Invariant Theory"
http://arxiv.org/abs/1310.6851

algorithm 6.1/7.1/7.2 is implemented.

examples:

linvar([x*y-1] , newmat(3,3,[[x,0,0],[0,x^2,0],[0,0,y]]),[t1,t2,t3]);

linvar([c*c+s*s-1] , newmat(2,2,[[c,s],[-s,c]]) , [x,y]);

linvar([c*c+s*s-1] , newmat(4,4,[[c,s,0,0],[-s,c,0,0],[0,0,c,s],[0,0,-s,c]]) , [q1,q2,p1,p2]);

linvar([c*c+s*s-1] ,
        newmat(7,7,[[c,s,0,0,0,0,a],
                    [-s,c,0,0,0,0,b],
                    [0,0,c,s,0,0,a],
                    [0,0,-s,c,0,0,b],
                    [0,0,0,0,c,s,a],
                    [0,0,0,0,-s,c,b],
                    [0,0,0,0,0,0,1]]) ,
        [x1,y1,x2,y2,x3,y3,z]);


linvar([a*d-b*c-1] , newmat(3,3,[[a^2 , 2*a*b , b^2],[a*c , a*d+b*c , b*d],[c^2 ,2*c*d ,d^2]]) , [x,y,z]);



*/
load("noro_pd.rr");
load("noro_matrix.rr");

def memq(Obj , Ls){
  for(C=Ls;C!=[];C=cdr(C)){
     if(Obj==car(C))return 1;
  }
  return 0;
}

def union(Ls , Rs){
   Ret = [];
   for(C=append(Ls,Rs) ; C!=[] ; C=cdr(C)){
      It = car(C);
      if( !memq(It,Ret) )Ret=cons(It , Ret);
   }
   return Ret;
}

def intersect(Ls , Rs){
    Ret = [];
    for(C=Ls;C!=[];C=cdr(C)){
       if(memq(car(C) , Rs))Ret=cons(car(C) , Ret);
    }
    return Ret;
}

def diffset(Ls , Rs){
   Ret = [];
   for(C=Ls;C!=[];C=cdr(C)){
      if(memq(car(C) , Rs))continue;
      Ret = cons(car(C) , Ret);
   }
   return Ret;
}

/*
多項式P中の単項式Mの係数を計算する
monocoef(y^3+x^3*y^2+2*x*y^2+2*x*y , x*y^2 , [x,y]);
なら、2を返す
monocoef(y^3+x^3*y^2+2*y^2+2*x*y , y^2 , [y]);
なら、x^3+2
monocoef(y^3+x^3*y^2+2*y^2+2*x*y , x*y^2 , [y]);
でも、x^3+2
*/
def monocoef(P,M,V){
   if( nmono(M)!=1 )return 0;
   HT = dp_ht(dp_ptod(M , V));
   for(T = dp_ptod(P,V) ; T ; T = dp_rest(T)){
      if(dp_ht(T)==HT)return dp_hc(T);
   }
}



def gen_monomials(Deg , V){
   if(Deg==0)return [1];
   Ret = [];
   for(C=gen_monomials(Deg-1 , V) ; C!=[] ; C=cdr(C)){
      for(I=0; I<length(V) ; I++){
         M = V[I]*car(C);
         if(!memq(M,Ret))Ret = cons(M , Ret);
      }
   }
   return Ret;
}

/*
msubst(t1 , [t1,t2,t3,t4],[t1*x^5,t2*x^3,t3*y^2,t4*y^4]);

*/
def msubst(P , Vars , Exprs){
   N = length(Vars);
   TV = [];
   TP = P;
   for(I = 0 ; I < N ; I++){
      NV = uc();
      TV = cons(NV , TV);
      TP = subst(TP , Vars[I] , NV);
   }
   TV=reverse(TV);
   for(I = 0 ; I < N ; I++){
      TP = subst(TP , TV[I] , Exprs[I]);
   }
   return TP;
}



/*
Algorithm 2.7 in
"Computing invariants of reductive groups in positive characteristic" by G.Kemper

IG:代数群の座標環の定義イデアル
RM:代数群の表現行列
Xs:代数群が作用する空間の座標(RMの行数/列数と等しくないといけない)
D:degree of homogeneous invariants(non-negative integer)


例:
homogeneousInvariants([a*d-b*c-1] , newmat(3,3,[[a^2 , 2*a*b , b^2],[a*c , a*d+b*c , b*d],[c^2 ,2*c*d ,d^2]]) , [x,y,z] , 2);

return [-z*x+y^2];

*/
def homogeneousInvariants(IG , RM , Xs , D){
    GVars = append(vars(IG) , vars(RM));
    AllVars = append(Xs , GVars);
    G = nd_gr(IG , GVars , 0 , 0);
    Monomials = gen_monomials(D , Xs);
    HPols = [];
    Ys = newvect(length(Xs));
    for(I = 0 ; I < length(Xs) ; I++){
       for(J = 0 ; J < length(Xs) ; J++){
          Ys[I] += RM[I][J]*Xs[J];
       }
    }
    for(C = Monomials ; C!=[] ; C=cdr(C)){
        P = car(C);
        Q = msubst(P , Xs , Ys) - P;
        HPols = cons(p_nf(Q , G , GVars , 0) , HPols);
    }
    HPols = reverse(HPols);
    for(Hs=HPols,RPol=0; Hs!=[] ; Hs=cdr(Hs)){
         for(V=dp_ptod(car(Hs),AllVars) ; V ; V=dp_rest(V)){
             RPol = RPol + dp_ht(V);
         }
    }
    Terms = [];
    for(V=RPol;V;V=dp_rest(V)){Terms = cons(dp_ht(V) , Terms);}
    Terms = reverse(Terms);
    /* Termsの各項はソートされてることに注意 */
    CMat = newmat(length(Terms) , length(HPols));
    for(Hs = HPols,J=0 ; Hs!=[] ; Hs=cdr(Hs) ,J++){
       V = dp_ptod(car(Hs),AllVars);
       for(Ts = Terms ,I=0; Ts!=[] ; Ts=cdr(Ts),I++){
           if(dp_ht(V)==dp_ht(car(Ts))){
              CMat[I][J] = dp_hc(V);
              V = dp_rest(V);
              if(!V)break;
           }
       }
    }
    Kernel = linalg.compute_kernel(CMat);
    Ret = [];
    for(I = 0 ; I < length(Kernel) ; I++){
       Evec = Kernel[I][0];
       P = 0;
       for(J = 0 ; J < length(Evec) ; J++){
          P = P + Evec[J]*Monomials[J];
       }
       if(P!=0)Ret = cons(P , Ret);
    }
    return Ret;
}



/*
step(5)(6)(7) of Algorithm 6.1 (Computation of a localization of an invariant ring)
*/
def rationalInvariants(IY , Ys , IX , Xs , Ord){
    /* step(5)(6) */
    MG = IY;
    RG = ltov(MG);   /* reduced Grobner bassis @ K(X)[y_1, ... y_n] */
    for(I = 0 ; I < length(MG) ; I++){
       FPol = MG[I];
       RG[I] = 0;
       FPol = p_nf(MG[I] , vtol(RG) , Ys , Ord);
       FPol = p_nf(FPol , IX , Xs , 0); /* IX should be Grobner basis */
       RG[I] = FPol;
    }
    /* step(7) */
    Ret = [];
    for(I = 0 ; I < length(RG) ; I++){
       F = RG[I];
       if(F==0)continue;
       F_terms = p_terms(F , Ys , Ord);
       LC_F = monocoef(F , F_terms[0] , Ys);
       for(J = 0 ; J <length(F_terms) ; J++){
          C_F = monocoef(F , F_terms[J] , Ys);
          Q = red(C_F/LC_F);
          if(length(vars(Q))==0)continue;
          Check = 0;
          for(K=0;K<length(Ret);K++){
             R=red(Ret[K]/Q);
             if(length(vars(R))==0){
               Check=1;
               break;
             }
          }
          if(Check==0){
            Ret = cons(Q , Ret);
          }
       }
    }
    return Ret;
}


/*
algorithm6.1

IX:代数群が作用する空間の定義イデアル
Xs:代数群が作用する空間の座標変数
IG:代数群の座標環の定義イデアル
Zs:代数群の座標環の変数
GReps:代数群の作用を表す多項式
*/
def localizedInvariants(IX , Xs , IG , Zs , GReps){
   N = length(Xs);
   /* step(1) is omitted */
   /* step(2) */
   Ys = [];
   GG = nd_gr(IG , Zs , 0 , 0);
   Ehat = append(IX , GG);
   for(I = 0 ; I < N ; I++){
     YI = uc();
     Ys = cons(YI , Ys);
     Ehat = cons(YI - GReps[I] , Ehat);
   }
   /* step(3) */
   AllVars = append(Zs , append(Ys, Xs));
   Ghat = nd_gr(Ehat , AllVars , 0 , [[0,length(Zs)],[0,length(Ys)],[0,length(Xs)]]);
   G = noro_pd.elimination(Ghat , append(Xs , Ys));
   Gx = noro_pd.elimination(Ghat , Xs);
   Gy = diffset(G , Gx);
   /* step(4) is skipped and proceed step(5)(6)(7) */
   QI = rationalInvariants(Gy , Ys , Gx , Xs , 0);
   QRats = [];
   QPols = [];
   for(I=0;I<length(QI);I++){
      if(length(vars(dn(QI[I])))!=0){
         QRats = cons(QI[I] , QRats);
      }else{
         QPols = cons(QI[I] , QPols);
      }
   }
   if(QRats==[]){
      return [1,QPols];
   }
   Hs = map(dn , QRats);
   Fs = map(nm , QRats);
   /* step(8)(9)(10) */
   Monomials = [];
   K = length(QRats);
   for(R = 0 ;; R++){
      for(C=gen_monomials(R , Xs) ; C!=[] ; C=cdr(C)){
         Check = 0;
         for(Ms = Monomials ; Ms!=[] ; Ms=cdr(Ms)){
            if(p_nf(car(Ms)-car(C) , Gx , Xs , 0)==0){
               Check=1;
               break;
            }
         }
         if(Check==0)Monomials = cons(car(C) , Monomials);
      }
      L = length(Monomials);
      NF_fm = newmat(L,K);
      NF_hm = newmat(L,K);
      NF_G = [];
      Pols = [];
      Terms = [];
      for(I = 0 ; I < L ; I++){
         P = msubst(Monomials[I] , Xs , GReps) - Monomials[I];
         P = p_nf(P , Gx , Xs , 0);
         P = p_nf(P , GG , Zs , 0);
         NF_G = cons(P , NF_G);
         for(J = 0 ; J < K ; J++){
            NF_fm[I][J] = p_nf(Fs[J]*Monomials[I] , Gx , Xs , 0);
            NF_hm[I][J] = p_nf(Hs[J]*Monomials[I] , Gx , Xs , 0);
            Pols = cons(NF_fm[I][J] , Pols);
            Pols = cons(NF_hm[I][J] , Pols);
         }
         Pols = cons(P , Pols);
      }
      NF_G = reverse(NF_G);
      for(Ps=Pols , RPol=0 ; Ps!=[] ; Ps=cdr(Ps)){
          for(V=dp_ptod(car(Ps),append(Xs,Zs)) ; V ; V=dp_rest(V)){
             RPol = RPol + dp_ht(V);
          }
      }
      for(V=RPol;V;V=dp_rest(V)){Terms = cons(dp_dtop(dp_ht(V),append(Xs,Zs)) , Terms);}
      /* solve equations in step(9) */
      PMat = newmat(K+1 , L*(K+1));
      for(J = 0 ; J < K ; J++){
          for(I = 0 ; I < L ; I++){
              PMat[J][I] = NF_fm[I][J];
          }
          for(JI = 0 ; JI < L ; JI++){
             for(JJ = 0 ; JJ < K ; JJ++){
                if(J==JJ)PMat[J][L+JI*K+JJ] = NF_hm[JI][JJ];
             }
          }
          for(I = 0 ; I < L ; I++){
             PMat[K][I] = NF_G[I];
          }
      }
      CMat = newmat(length(Terms)*(K+1) , L*(K+1));
      for(Idx = 0 , F = 0 ; F < length(Terms) ; F++){
         for(W = 0 ; W < size(PMat)[0] ; W++ , Idx++){
             for(H = 0 ; H < size(PMat)[1] ; H++){
                 CMat[Idx][H] = monocoef(PMat[W][H] , Terms[F] , append(Xs,Zs));
             }
         }
      }
      Kernel = linalg.compute_kernel(CMat);
      if(length(Kernel)!=0){
         Vs = Kernel[0][0];
         AP = 0;
         for(I = 0 ; I < L ; I++)AP = AP+Vs[I]*Monomials[I];
         if(AP!=0)break;
      }

   }
   Bs = [];
   for(J = 0 ; J < K ; J++){
      BP = 0;
      for(I = 0 ; I < L ; I++){
          BP = BP+Vs[L+I*K+J]*Monomials[I];
      }
      if(BP!=0)Bs = cons(BP , Bs);
   }
   Bs = union(QPols , Bs);
   Check = 0;
   for(I = 0 ; I < length(Bs) ; I++){
      if( length(vars(red(Bs[I]/AP)))==0 ){Check=1;break;}
   }
   if(Check==0){Bs=cons(AP,Bs);}
   return [AP,Bs];
}


def linvar(IG , RM , Xs){
   GVars = append(vars(IG) , vars(RM));
   NM = size(RM);
   Ts = [];
   for(I = 0 ; I < length(Xs) ; I++){
      NP = 0;
      for(J = 0 ; J < length(Xs) ; J++){
          NP = NP + RM[I][J]*Xs[J];
      }
      Ts = cons(NP , Ts);
   }
   AB = localizedInvariants([] , Xs , IG , GVars , reverse(Ts));
   AP = AB[0];
   BPols = AB[1];
   /* start algorithm 7.1 */
   Ret = [];
   for(Deg = 1 ; ; Deg++){
      G = [];
      Ys = newvect(length(Ret));
      for(I = 0 ; I < length(Ret) ; I++){
         Ys[I] = uc();
         G = cons(Ys[I] - Ret[I] , G);
      }
      /* algorithm7.1 step(2) */
      Jhat = nd_gr(G , append(Xs , vtol(Ys)) , 0 , [[0,length(Xs)],[0,length(Ys)]]);
      J = noro_pd.elimination(Jhat , vtol(Ys));
      Check1 = 1;  /* $B \subset A$? */
      Check2 = 0;  /* $K[X] \dot a \cap A= A \dot a$? */
      /* Check B \subset A */
      /* 
         algorithm for subring contaiment:
         * subroutine 2.5.4 in "Algorithms in Invariant Theory" by Sturmfels
         * subroutine 2.5 in 
         "Efficient computation offundamental invariants - An approach using Buchberger's Grobner bases method" 
         (Sturmfels and White)
      */
      for(I = 0 ; I < length(BPols) ; I++){
         QPol = p_nf(BPols[I] , Jhat , append(Xs , vtol(Ys)) , 0);
         if( intersect(vars(QPol) , Xs)!=[] ){
             Check1 = 0;
             break;
         }
      }
      if(AP==1){
         Check2 = Check1;
      }else if(Check1==1){
         Check2 = 1;
         for(Hs = J ; Hs!=[] ; Hs=cdr(Hs)){
             HPol = red(msubst(car(Hs) , vtol(Ys) , Ret)/AP);
             if(dn(HPol)!=1){Check2=0;break;}
             QPol = p_nf(HPol , Jhat , append(Xs , vtol(Ys)) , 0);
             if( intersect(vars(QPol) , Xs)!=[] ){
                Check2 = 0;
                break;
             }
         }
      }
      if(Check2==1)return Ret;
      /* algorithm 7.2 step(3)(4) */
      for(S=homogeneousInvariants(IG,RM,Xs,Deg) ; S!=[] ; S=cdr(S)){
         SPol = p_nf(car(S) , Jhat , append(Xs , vtol(Ys)) , 0);
         if( intersect(vars(SPol) , Xs)!=[] ){
            Ret = cons(car(S), Ret);
         }
      }
   }
}

