/*
partial implementation of algorithms described in

"Using Extended Derksen Ideals in Computational Invariant Theory"
http://arxiv.org/abs/1310.6851

algorithm 6.1/7.1/7.2 is implementedi now.
see test code for examples.
*/
load("gr");
load("noro_pd.rr");
load("noro_matrix.rr");

def memq(Obj , Ls){
  for(C=Ls;C!=[];C=cdr(C)){
     if(Obj==car(C))return 1;
  }
  return 0;
}

def union(Ls , Rs){
   Ret = [];
   for(C=append(Ls,Rs) ; C!=[] ; C=cdr(C)){
      It = car(C);
      if( !memq(It,Ret) )Ret=cons(It , Ret);
   }
   return Ret;
}

def intersect(Ls , Rs){
    Ret = [];
    for(C=Ls;C!=[];C=cdr(C)){
       if(memq(car(C) , Rs))Ret=cons(car(C) , Ret);
    }
    return Ret;
}

def diffset(Ls , Rs){
   Ret = [];
   for(C=Ls;C!=[];C=cdr(C)){
      if(memq(car(C) , Rs))continue;
      Ret = cons(car(C) , Ret);
   }
   return Ret;
}

def tdeg(F , Xs){
   Ret = 0;
   for(V = dp_ptod(F,Xs) ; V ; V = dp_rest(V)){
      D = 0;
      for(I = 0 ; I < length(Xs) ; I++){
         D = D + deg(dp_dtop(dp_ht(V) , Xs) , Xs[I]);
      }
      if(D > Ret)Ret=D;
   }
   return Ret;
}

def max(Ls){
   V = 0;
   for(Ls=Ls ; Ls!=[] ; Ls=cdr(Ls)){
      if(car(Ls) > V)V=car(Ls);
   }
   return V;
}


/*
多項式P中の単項式Mの係数を計算する
monocoef(y^3+x^3*y^2+2*x*y^2+2*x*y , x*y^2 , [x,y]);
なら、2を返す
monocoef(y^3+x^3*y^2+2*y^2+2*x*y , y^2 , [y]);
なら、x^3+2
monocoef(y^3+x^3*y^2+2*y^2+2*x*y , x*y^2 , [y]);
でも、x^3+2
*/
def monocoef(P,M,V){
   if( nmono(M)!=1 )return 0;
   HT = dp_ht(dp_ptod(M , V));
   for(T = dp_ptod(P,V) ; T ; T = dp_rest(T)){
      if(dp_ht(T)==HT)return dp_hc(T);
   }
}


def gen_monomials(Deg , V){
   if(Deg==0)return [1];
   Ret = [];
   for(C=gen_monomials(Deg-1 , V) ; C!=[] ; C=cdr(C)){
      for(I=0; I<length(V) ; I++){
         M = V[I]*car(C);
         if(!memq(M,Ret))Ret = cons(M , Ret);
      }
   }
   return Ret;
}

/*
msubst(t1 , [t1,t2,t3,t4],[t1*x^5,t2*x^3,t3*y^2,t4*y^4]);

*/
def msubst(P , Vars , Exprs){
   TV = [];
   TP = P;
   for(V = Vars ; V!=[] ; V=cdr(V)){
      NV = uc();
      TV = cons(NV , TV);
      TP = subst(TP , car(V) , NV);
   }
   for(V=reverse(TV) , I = 0 ; V!=[] ; V=cdr(V),I++){
      TP = subst(TP , car(V) , Exprs[I]);
   }
   return TP;
}


/*
多項式係数の行列の定数係数のKernelを計算する
*/
def p_compute_kernel(PMat){
   Sz = size(PMat);
   Vars = vars(PMat);
   N = Sz[0];
   M = Sz[1];
   RPol = 0;
   for(I = 0 ; I < N ; I++){
      for(J = 0 ; J < M ; J++){
          for(V = dp_ptod(PMat[I][J] , Vars) ; V ; V=dp_rest(V)){
             RPol = RPol + dp_ht(V);
          }
      }
   }
   Terms = [];
   for(V=RPol;V;V=dp_rest(V)){Terms = cons(dp_ht(V) , Terms);}
   CMat = newmat(length(Terms)*N , M);
   for(Idx = 0 , Terms = Terms ; Terms!=[] ; Terms=cdr(Terms)){
      Term = dp_dtop(car(Terms) , Vars);
      for(W = 0 ; W < N ; W++ , Idx++){
           for(H = 0 ; H < M ; H++){
               CMat[Idx][H] = monocoef(PMat[W][H] , Term , Vars);
           }
      }
   }
   return linalg.compute_kernel(CMat);
}


/*
Algorithm 2.7 in
"Computing invariants of reductive groups in positive characteristic" by G.Kemper

IG:代数群の座標環の定義イデアル
RM:代数群の表現行列
Xs:代数群が作用する空間の座標(RMの行数/列数と等しくないといけない)
D:degree of homogeneous invariants(non-negative integer)


例:
homogeneousInvariants([a*d-b*c-1] , newmat(3,3,[[a^2 , 2*a*b , b^2],[a*c , a*d+b*c , b*d],[c^2 ,2*c*d ,d^2]]) , [x,y,z] , 2);

return [-z*x+y^2];

*/
def homogeneousInvariants(IG , RM , Xs , D){
    GVars = union(vars(IG) , vars(RM));
    AllVars = append(Xs , GVars);
    G = nd_gr(IG , GVars , 0 , 0);
    Monomials = ltov(gen_monomials(D , Xs));
    Ys = RM*ltov(Xs);
    N = length(Monomials);
    RMat = newmat(N,N);
    for(I = 0 ; I< N ; I++){
       P = Monomials[I];
       Q = msubst(P , Xs , Ys);
       Q = p_nf(Q-P , G , GVars , 0);
       for(J = 0 ; J < N ; J++){
          RMat[J][I] = monocoef(Q,Monomials[J],Xs);
       }
    }
    K = p_compute_kernel(RMat);
    Ret = [];
    for(I =  0 ; I < length(K) ; I++){
        P = matr(Monomials)*matc(K[I][0]);
        Ret = cons(P[0][0],Ret);
    }
    return Ret;
}





/*
step(5)(6)(7) of Algorithm 6.1 (Computation of a localization of an invariant ring)

IX:代数群が作用する空間の定義イデアル
Xs:代数群が作用する空間の座標変数
IG:代数群の座標環の定義イデアル
Zs:代数群の座標環の変数
GMaps:代数群の作用を表す多項式
*/
def rationalInvariants(GX , Xs , GY , Ys , Ord){
    Ret = [];
    CurOrd = dp_ord();
    dp_ord(Ord);   /* to get leading coefficient */
    for(RG = nd_gr_trace(GY , Ys , 1 , 1 , Ord) ; RG!=[] ; RG=cdr(RG)){
       F = p_nf(car(RG) , GX , Xs , 0); /* GX should be Groebner bases */
       if(F==0)continue;
       V = dp_ptod(F , Ys);
       LC_F = dp_hc(V);
       for(V=dp_rest(V) ; V ; V=dp_rest(V)){
          C_F = dp_hc(V);
          Q = red(C_F/LC_F);
          if(length(vars(Q))==0)continue;
          Check = 0;
          for(K=0;K<length(Ret);K++){
             R=red(Ret[K]/Q);
             if(length(vars(R))==0){
               Check=1;
               break;
             }
          }
          if(Check==0){
            Ret = cons(Q , Ret);
          }
       }
    }
    dp_ord(CurOrd);
    return Ret;
}


/*
implementation of algorithm 6.1 and algorithm 7.1
*/
def linvar(IG , RM , Xs){
   Zs = append(vars(IG) , vars(RM));
   GMaps = RM*ltov(Xs);
   /* start algorithm 6.1 */
   IX = [];
   /* step(1) is omitted */
   /* step(2) */
   Ys = [];
   GG = nd_gr(IG , Zs , 0 , 0);
   Ehat = append(IX , GG);
   for(I = 0 ; I < length(Xs) ; I++){
     YI = uc();
     Ys = cons(YI , Ys);
     Ehat = cons(YI - GMaps[I] , Ehat);
   }
   /* step(3) */
   AllVars = append(Zs , append(Ys, Xs));
   Ghat = nd_gr_trace(Ehat , AllVars , 1 , 1 , [[0,length(Zs)],[0,length(Ys)],[0,length(Xs)]]);
   G = noro_pd.elimination(Ghat , append(Xs , Ys));
   GX = noro_pd.elimination(Ghat , Xs);
   GY = diffset(G , GX);
   /* step(4) is skipped and proceed step(5)(6)(7) */
   QExprs = rationalInvariants(GX , Xs , GY , Ys , 0);
   QRats = [];
   QPols = [];
   for( ;QExprs!=[] ; QExprs=cdr(QExprs)){
      QExpr = car(QExprs);
      if(length(vars(dn(QExpr)))!=0){
         QRats = cons(QExpr , QRats);
      }else{
         QPols = cons(QExpr , QPols);
      }
   }
   /* algorithm 6.1 step(8)(9)(10) */
   if(QRats==[]){
      AP = 1;
      BPols = QPols;
   }else{
      K =length(QRats);
      Hs = map(dn , QRats);
      Fs = map(nm , QRats);
      InvPols = [];
      for(R = 1 ;; R++){
         InvPols = append(homogeneousInvariants(IG , RM , Xs , R) , InvPols);
         /* solve equations in step(9) */
         Bases = ltov(InvPols);
         for(J = 0; J < K ; J++){
              L = length(Bases);
              PMat = newvect(L+length(InvPols));
              for(I = 0 ; I < L ; I++){
                 PMat[I] = p_nf(Fs[J]*Bases[I] , GX , Xs , 0);
              }
              for(I = 0 ; I < length(InvPols) ; I++){
                 PMat[I+L] = p_nf(Hs[J]*InvPols[I] , GX , Xs , 0);
              }
              NewBases = [];
              for(Kernel = p_compute_kernel(matr(PMat)) ; Kernel!=[] ; Kernel=cdr(Kernel)){
                 V = car(Kernel)[0];
                 Pol = 0;
                 for(I = 0 ; I <L ; I++)Pol=Pol+V[I]*Bases[I];
                 if(Pol!=0)NewBases = cons(Pol , NewBases);
              }
              Bases = ltov(NewBases);
              if(length(Bases)==0)break;
         }
         if(length(Bases)>0){
             AP = Bases[0];
             break;
         }
      }
      BPols = [];
      for(J = 0 ; J < K ; J++){
         BPols = cons(red(AP*Fs[J]/Hs[J]) , BPols);
      }
      BPols = union(QPols , BPols);
      Check = 0;
      for(I = 0 ; I < length(BPols) ; I++){
         if( length(vars(red(BPols[I]/AP)))==0 ){Check=1;break;}
      }
      if(Check==0){BPols=cons(AP,BPols);}
   }
   /* start algorithm 7.1 */
   Ret = [];
   for(Deg = 1 ; ; Deg++){
      if(Deg==1){
         Ys = newvect(length(Ret));
         for(I = 0 ; I < length(Ret) ; I++)Ys[I] = uc();
         Jhat = nd_gr(vtol(Ys - ltov(Ret)) , append(Xs , vtol(Ys)) , 0 , [[0,length(Xs)],[0,length(Ys)]]);
      }
      Check1 = 1; /* $B \subset A$? */
      Check2 = 0; /* $K[X] \dot a \cap A= A \dot a$? */
      /* Check B \subset A */
      /*
         algorithm for subring contaiment:
         * subroutine 2.5.4 in "Algorithms in Invariant Theory" by Sturmfels
         * subroutine 2.5 in
         "Efficient computation offundamental invariants - An approach using Buchberger's Grobner bases method"
         (Sturmfels and White)
      */
      for(I = 0 ; I < length(BPols) ; I++){
         QPol = p_nf(BPols[I] , Jhat , append(Xs , vtol(Ys)) , 0);
         if( intersect(vars(QPol) , Xs)!=[] ){
             Check1 = 0;
             break;
         }
      }
      if(AP==1){
         Check2 = Check1;
      }else if(Check1==1){
         Check2 = 1;
         for(Hs = noro_pd.elimination(Jhat , vtol(Ys)) ; Hs!=[] ; Hs=cdr(Hs)){
             HPol = red(msubst(car(Hs) , vtol(Ys) , Ret)/AP);
             if(dn(HPol)!=1){Check2=0;break;}
             QPol = p_nf(HPol , Jhat , append(Xs , vtol(Ys)) , 0);
             if( intersect(vars(QPol) , Xs)!=[] ){
                Check2 = 0;
                break;
             }
         }
      }
      if(Check2==1)return Ret;
      /* algorithm 7.2 step(3)(4) */
      for(S=homogeneousInvariants(IG,RM,Xs,Deg) ; S!=[] ; S=cdr(S)){
         SPol = p_nf(car(S) , Jhat , append(Xs , vtol(Ys)) , 0);
         if( intersect(vars(SPol) , Xs)!=[] ){
            Ret = reverse(cons(car(S), Ret));
            NewY = uc();
            Ys = ltov(reverse(cons(NewY , vtol(Ys))));
            Jhat = nd_gr(cons(car(S)-NewY,Jhat) , append(Xs , vtol(Ys)) , 0 , [[0,length(Xs)],[0,length(Ys)]]);
         }
      }
   }
}


/* ==================================== */
/* simple test code for linvar */

def rngeq(R1 , R2){
   Ys = [];
   G = [];
   for(I = 0 ; I < length(R1) ; I++)Ys=cons(uc() , Ys);
   for(I = 0 ; I < length(R1) ; I++)G=cons(Ys[I]-R1[I] , G);
   G = nd_gr(G , append(vars(R1) , Ys) , 0 , [[0,length(vars(R1))],[0,length(R1)]]);
   for(J = 0 ; J < length(R2) ; J++){
      P = p_nf(R2[J] , G , append(vars(R1) , Ys) , 0);
      if(intersect(vars(P) , vars(R1))!=[])return 0;
   }
   G = [];
   Ys = [];
   for(I = 0 ; I < length(R2) ; I++)Ys=cons(uc() , Ys);
   for(I = 0 ; I < length(R2) ; I++)G=cons(Ys[I]-R2[I] , G);
   G = nd_gr(G , append(vars(R2) , Ys) , 0 , [[0,length(vars(R2))],[0,length(R2)]]);
   for(J = 0 ; J < length(R1) ; J++){
      P = p_nf(R1[J] , G , append(vars(R2) , Ys) , 0);
      if(intersect(vars(P) , vars(R2))!=[])return 0;
   }
   return 1;
}

def test_linvar(){
   /* 3-dimensional irrep of SL(3) */
   R1 = linvar ([a*d-b*c-1] , newmat(3,3,[[a^2 , 2*a*b , b^2],[a*c , a*d+b*c , b*d],[c^2 ,2*c*d ,d^2]]) , [x,y,z]);
   R2 = [-z*x+y^2];
   print("3-dimensional irrep of SL(3):");
   if(!rngeq(R1,R2)){print("failed");}else{print("OK");}

   /* natural rep of SO(2) */
   R1 = linvar([c*c+s*s-1] , newmat(2,2,[[c,s],[-s,c]]) , [x,y]);
   R2 = [x^2+y^2];
   print("natural rep. of SO(2):");
   if(!rngeq(R1,R2)){print("failed");}else{print("OK");}

   /* 4-dim rep. of SO(2) */
   R1 = linvar([c*c+s*s-1] , newmat(4,4,[[c,s,0,0],[-s,c,0,0],[0,0,c,s],[0,0,-s,c]]) , [q1,q2,p1,p2]);
   R2 = [q1^2+q2^2,p1^2+p2^2,-p2*q1+p1*q2,p1*q1+p2*q2];
   print("4-dim rep. of SO(2):");
   if(!rngeq(R1,R2)){print("failed");}else{print("OK");}

   /* 3-dim rep. of GL(1) */
   R1 = linvar([x*y-1] , newmat(3,3,[[x,0,0],[0,x^2,0],[0,0,y]]),[t1,t2,t3]);
   R2 = [t3^2*t2,t3*t1];
   print("3-dim rep. of GL(1):");
   if(!rngeq(R1,R2)){print("failed");}else{print("OK");}

   /* 5-dim rep. of SL(2) from arXiv:0807.3476 Proposition5.1 */
   M = newmat(5,5,[[a^2,2*a*b,b^2,0,0],
                    [a*c,a*d+b*c,b*d,0,0],
                    [c^2,2*c*d,d^2,0,0],
                    [0,0,0,a,b],
                    [0,0,0,c,d]]);
   R1 = linvar([a*d-b*c-1] , M , [a0,a1,a2,x1,x2]);
   R2 = [x2^2*a0-2*x2*x1*a1+x1^2*a2,-a2*a0+a1^2];
   print("5-dim rep. of SL(2):");
   if(!rngeq(R1,R2)){print("failed");}else{print("OK");}

   /* 7-dim rep. of ISO(2) */
   R1 = linvar([c*c+s*s-1] ,
          newmat(7,7,[[c,s,0,0,0,0,a],
                      [-s,c,0,0,0,0,b],
                      [0,0,c,s,0,0,a],
                      [0,0,-s,c,0,0,b],
                      [0,0,0,0,c,s,a],
                      [0,0,0,0,-s,c,b],
                      [0,0,0,0,0,0,1]]) ,
          [x1,y1,x2,y2,x3,y3,z]);
   R2 = [(x1-x3)^2+(y1-y3)^2 , (x2-x3)^2+(y2-y3)^2 , (y1-y3)*(x2-x3)-(y2-y3)*(x1-x3) , 
         (x2-x3)*(x1-x3)+(y2-y3)*(y1-y3) , z];
   print("7-dim rep. of ISO(2):");
   if(!rngeq(R1,R2)){print("failed");}else{print("OK");}

   /* 6-dim rep. of O(2) x {+1,-1} */
   /* example5.9.1(p.229) of 'computational invariant theory'(Derksen/Kemper) */
   R1 = linvar([z1^2-1 , z2^2-1 , z3^2+z4^2-1],
        newmat(6,6,[[1,0,0,0,0,0],
                    [0,z3^2,z4^2,0,0,2*z3*z4],
                    [0,z4^2,z3^2,0,0,-2*z3*z4],
                    [0,0,0,z1*z2*z3,z1*z2*z4,0],
                    [0,0,0,-z1*z4,z1*z3,0],
                    [0,-z2*z3*z4,z2*z3*z4,0,0,z2-2*z2*z4^2]]),
         [sx,sy,sz,t_yx,t_zx,t_yz]);
   R2 = [sx , sy+sz , t_yx^2+t_zx^2 , sz*sy-t_yz^2 , t_zx^2*sy+t_yx^2*sz-2*t_yz*t_zx*t_yx];
   print("6-dim rep of O(2) x {+1,-1}:");
   if(!rngeq(R1,R2)){print("failed");}else{print("OK");}

}

